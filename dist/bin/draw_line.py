import torch
from matplotlib import pyplot as plt
import numpy as np

# with open('pingjun.txt') as file:
#     lists = [s.split(' ') for s in file.read().split('\n')]
#     for i, v in enumerate(lists):
#         lists[i] = [float(st) for st in v]
#     lists = torch.Tensor(lists)
# labels = [(2745 + 602 * i) for i in range(15)]
# labels = torch.Tensor([242]*8)
# labels = torch.Tensor([1822,1822 + 709.9,1822 + 709.9 + 540.7,1822 + 709.9 + 540.7 + 774.8,1822 + 709.9 + 540.7 + 774.8 + 919.8,1822 + 709.9 + 540.7 + 774.8 + 919.8 + 1022.5,1822 + 709.9 + 540.7 + 774.8 + 919.8 + 1022.5 + 982,1822 + 709.9 + 540.7 + 774.8 + 919.8 + 1022.5 + 982 + 668.1])
# labels = lists[:,1].numpy() - 51.5
labels = torch.Tensor([0,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,0,0,0,0,0,0,0,0,0,0,0,0,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,10,20,30,40,50,60,-20,-30,-40,-50,-60,-10,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60,10,20,30,40,50,60,-10,-20,-30,-40,-50,-60]).numpy()
print(labels)
# x  = lists[:,1].numpy()
# x = lists[:, 2].numpy()
x = torch.Tensor([0,9.996,19.996,29.995,39.991,49.986,59.983,-10,-19.999,-29.999,-39.999,-50,-59.998,0,0,0,0,0,0,0,0,0,0,0,0,9.993,19.98,29.943,39.866,49.71,59.404,-9.997,-19.985,-29.948,-39.874,-49.722,-59.42,9.987,19.94,29.807,39.522,48.969,57.93,-19.944,-29.817,-39.534,-48.987,-57.951,-9.992,9.965,19.808,29.372,38.472,46.865,54.21,-9.976,-19.817,-29.383,-38.49,-46.885,-54.235,9.939,19.659,28.901,37.431,44.97,51.24,-9.953,-19.672,-28.923,-37.454,-44.992,-51.258,9.997,19.985,29.95,39.876,49.723,59.419,-9.999,-19.99,-29.961,-39.883,-49.733,-59.433,9.992,19.951,29.823,39.543,48.995,57.962,-9.997,-19.956,-29.827,-39.551,-49.008,-57.979,9.978,19.83,29.404,38.517,46.915,54.258,-9.983,-19.836,-29.412,-38.525,-46.923,-54.273,9.962,19.697,28.965,37.505,45.05,51.32,-9.975,-19.715,-28.982,-37.519,-45.074,-51.342]).numpy()
print('x is :\n', x)
y = np.array(labels)
print('y is :\n', y)
# 用3次多项式拟合
f1 = np.polyfit(x, y, 4)
print('f1 is :\n', f1)
with open('rectify.txt','a+') as rec_file:
    for param in f1:
        rec_file.write('%.30e ' % param)
    rec_file.write('\n')
p1 = np.poly1d(f1)
print('p1 is :\n', p1)
#也可使用yvals=np.polyval(f1, x)
yvals = p1(x)  # 拟合y值
print('yvals is :\n', yvals)

# 绘图
plot1 = plt.plot(x, y, '*', label='original values')
plot2 = plt.plot(x, yvals, 'r', label='polyfit values')
plt.xlabel('x')
plt.ylabel('y')
plt.legend(loc=4)  # 指定legend的位置右下角
plt.title('polyfitting')
plt.show()
