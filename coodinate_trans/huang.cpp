#include<iostream>
#include<fstream>
#include <opencv2/opencv.hpp>
#include < iomanip >

using namespace std;
using namespace cv;
void get_theta(Mat R) {
	double x11 = R.at<double>(0, 0);
	double x12 = R.at<double>(0, 1);
	double x13 = R.at<double>(1, 0);
	double x14 = R.at<double>(1, 1);
}
void getAffine() {
	/*
	vector<Point2f> get_point = { Point2f(3500368.3670,476301.5760),Point2f(3500358.5590,476301.6917),Point2f(3500371.3640,476369.1905),Point2f(3500361.5930,476368.9739),Point2f(3500374.3040,476435.2630),Point2f(3500364.5400,476435.6897),Point2f(3500376.5140,476484.5921),Point2f(3500366.7320,476485.0356),Point2f(3500379.3100,476549.9902),Point2f(3500369.6600,476550.4198),Point2f(3500382.0130,476607.2748),Point2f(3500372.2100,476607.7409),Point2f(3500384.5730,476664.5777),Point2f(3500374.7660,476665.0292),Point2f(3500387.4680,476729.9510),Point2f(3500377.7000,476730.6000),Point2f(3500390.2420,476795.2857),Point2f(3500380.5820,476795.6393),Point2f(3500393.0140,476854.5970),Point2f(3500383.2520,476855.2978),Point2f(3500395.9060,476919.9761),Point2f(3500386.1520,476920.5060),Point2f(3500398.8440,476985.3488),Point2f(3500389.0570,476985.7954),Point2f(3500401.7470,477050.6837),Point2f(3500391.9610,477051.1200)};
	vector<Point2f> real_point = { Point2f(3500368.4600,523739.3741),Point2f(3500358.6530,523739.5347),Point2f(3500371.7670,523806.9742),Point2f(3500361.9950,523806.8023),Point2f(3500375.0090,523873.0325),Point2f(3500365.2470,523873.5039),Point2f(3500377.4450,523922.3510),Point2f(3500367.6660,523922.8393),Point2f(3500380.5400,523987.7357),Point2f(3500370.8920,523988.2094),Point2f(3500383.5060,524045.0073),Point2f(3500373.7050,524045.5183),Point2f(3500386.3270,524102.2979),Point2f(3500376.5220,524102.7943),Point2f(3500389.5210,524167.6573),Point2f(3500379.7570,524168.3510),Point2f(3500392.5940,524232.9787),Point2f(3500382.9360,524233.3765),Point2f(3500395.6380,524292.2767),Point2f(3500385.8790,524293.0222),Point2f(3500398.8290,524357.6420),Point2f(3500389.0780,524358.2165),Point2f(3500402.0660,524423.0006),Point2f(3500392.2810,524423.4920),Point2f(3500405.2680,524488.3216),Point2f(3500395.4840,524488.8026)};
	*/
	Mat get_point = (Mat_<double>(26, 2) << 3500368.3670, 476301.5760, 3500358.5590, 476301.6917, 3500371.3640, 476369.1905, 3500361.5930, 476368.9739, 3500374.3040, 476435.2630, 3500364.5400, 476435.6897, 3500376.5140, 476484.5921, 3500366.7320, 476485.0356, 3500379.3100, 476549.9902, 3500369.6600, 476550.4198, 3500382.0130, 476607.2748, 3500372.2100, 476607.7409, 3500384.5730, 476664.5777, 3500374.7660, 476665.0292, 3500387.4680, 476729.9510, 3500377.7000, 476730.6000, 3500390.2420, 476795.2857, 3500380.5820, 476795.6393, 3500393.0140, 476854.5970, 3500383.2520, 476855.2978, 3500395.9060, 476919.9761, 3500386.1520, 476920.5060, 3500398.8440, 476985.3488, 3500389.0570, 476985.7954, 3500401.7470, 477050.6837, 3500391.9610, 477051.1200);
	Mat real_point = (Mat_<double>(26, 2) << 3500368.4600, 523739.3741, 3500358.6530, 523739.5347, 3500371.7670, 523806.9742, 3500361.9950, 523806.8023, 3500375.0090, 523873.0325, 3500365.2470, 523873.5039, 3500377.4450, 523922.3510, 3500367.6660, 523922.8393, 3500380.5400, 523987.7357, 3500370.8920, 523988.2094, 3500383.5060, 524045.0073, 3500373.7050, 524045.5183, 3500386.3270, 524102.2979, 3500376.5220, 524102.7943, 3500389.5210, 524167.6573, 3500379.7570, 524168.3510, 3500392.5940, 524232.9787, 3500382.9360, 524233.3765, 3500395.6380, 524292.2767, 3500385.8790, 524293.0222, 3500398.8290, 524357.6420, 3500389.0780, 524358.2165, 3500402.0660, 524423.0006, 3500392.2810, 524423.4920, 3500405.2680, 524488.3216, 3500395.4840, 524488.8026);
	//cout << get_point <<  endl << real_point<<endl;
	Mat liner;
	Mat result = estimateAffine2D(get_point, real_point,liner, cv::LMEDS ,1e-6,1e5, 0.99,1e4);

	////cout << liner << liner.size() << liner.elemSize1
	//cout << result.cols<< get_point.size();

	cout << result << endl;
	Mat  affine_R, affine_T;
	affine_R = result(Rect(0, 0, 2, 2));
	affine_T = result.colRange(2, 3);
	//ofstream outfile("predict_rareway.txt", ios::app);
	//outfile.setf(ios::fixed, ios::floatfield);  // 设定为 fixed 模式，以小数点表示浮点数
	//outfile.precision(5);

	//Mat rr = (Mat_<double>(2, 2) << 0.99998953064920115135419946793678,-0.00457587062649187474253169618802,0.00457587062649187474253169618802‬,0.99998953064920115135419946793678);
	//Mat tt = (Mat_<double>(2, 1) << -2142.7543, 63460.0176);
	//for (int i = 0; i < get_point.rows; i++) {
	//	Mat per_get_point = get_point.row(i);
	//	Mat predict_point = (affine_R * per_get_point.t() + affine_T);
	//	/*
	//	Mat predict_a = (rr * (per_get_point.t()) + tt);
	//	*/
	//	outfile << per_get_point.at<double>(0, 0) << "," << per_get_point.at<double>(0, 1) << endl;
	//	//outfile << predict_a.at<double>(0, 0) << "," << predict_a.at<double>(1, 0) << endl;
	//	outfile << predict_point.at<double>(0, 0) << "," << predict_point.at<double>(1, 0) << endl;
	//	outfile << endl;
	//	
	//	//cout << predict_point << endl;
	//}



	FileStorage fs("coodinate2d.yml", FileStorage::WRITE);

	if (fs.isOpened())
	{
		fs << "R" << affine_R << "T" << affine_T;
		fs.release();
	}


	//cout << affine_R  << endl << affine_T << endl;
}
int main() {
	getAffine();
	cin.get();
	return 0;
}